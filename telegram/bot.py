from telegram import Update, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    ConversationHandler,
)
import requests
import os
import random
import redis
import string
from datetime import datetime
from dateutil import parser
from typing import Optional

BASE_URL = "http://vaulty_service:8080/api/v1"
DEFAULT_PASSWORD_LENGTH = 16
DEFAULT_TOKEN_TTL = 7 * 24 * 60 * 60 # 1 week
LOGIN, MASTER_KEY = range(2)
CONFIRM_RESET, AWAITING_TOTP = range(2)
AWAITING_PASSWORD = range(1)

REDIS_CONN = None


def get_redis_connection():
    global REDIS_CONN
    if REDIS_CONN is None:
        redis_host = os.getenv("REDIS_HOST", "localhost")
        redis_port = int(os.getenv("REDIS_PORT", 6379))
        redis_password = os.getenv("REDIS_PASSWORD", None)
        REDIS_CONN = redis.StrictRedis(
            host=redis_host,
            port=redis_port,
            password=redis_password,
            decode_responses=True,
        )
    return REDIS_CONN


def add_token(user_id: int, token: str, ttl: int) -> None:
    redis_conn = get_redis_connection()
    redis_conn.setex(f"user:{user_id}:token", ttl, token)


def get_token(user_id: int) -> Optional[str]:
    redis_conn = get_redis_connection()
    return redis_conn.get(f"user:{user_id}:token")


def delete_token(user_id: int) -> None:
    redis_conn = get_redis_connection()
    redis_conn.delete(f"user:{user_id}:token")


def set_token_ttl(user_id: int, ttl: int) -> bool:
    redis_conn = get_redis_connection()
    return redis_conn.expire(f"user:{user_id}:token", ttl)


def escape_markdown_v2(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è MarkdownV2"""
    special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!', ':']
    for char in special_chars:
        text = text.replace(char, f"\\{char}")
    return text


async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
    "üìñ *–ü–æ–º–æ—â—å*\n\n"
    "üîê *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
    "/start - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–ª–∏ –≤—Ö–æ–¥ –≤ –±–æ—Ç–∞.\n"
    "/add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å.\n"
    "/del <ID> - –£–¥–∏–ª—Ç—å –ø–∞—Ä–æ–ª—å.\n"
    "/get - –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏.\n"
    "/logout - –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –æ—á–∏—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é.\n"
    "/gen <–¥–ª–∏–Ω–∞> - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–¥—ë–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª–∏–Ω–∞ 16 —Å–∏–º–≤–æ–ª–æ–≤. –ú–∏–Ω–∏–º—É–º ‚Äî 8 —Å–∏–º–≤–æ–ª–æ–≤.\n"
    "/reset\_user\_forever - üö® *–í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–∏—Ç –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –∏ –í–°–ï —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ –ù–ê–í–°–ï–ì–î–ê!* üö®\n"
    "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
    "üîë *–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Google Authenticator:*\n"
    "1. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Google Authenticator.\n"
    "2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–Ω–∞—á–æ–∫ '+' –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.\n"
    "3. –í—ã–±–µ—Ä–∏—Ç–µ '–í–≤–µ—Å—Ç–∏ –∫–ª—é—á –≤—Ä—É—á–Ω—É—é'.\n"
    "4. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π TOTP-–∫–ª—é—á –∏ —É–∫–∞–∂–∏—Ç–µ –∏–º—è vaulty.\n"
    "5. –ù–∞–∂–º–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å', —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É.\n"
    "6. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ –∫–æ–¥—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –±–æ—Ç–µ.\n\n"
    "üõ° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:*\n"
    "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å *–∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ* –¥–∏–∞–ª–æ–≥–∞ —Å –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞.\n"
    "–≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —á–∞—Ç–∞:\n"
    "1. –û—Ç–∫—Ä–æ–π—Ç–µ —ç—Ç–æ—Ç —á–∞—Ç.\n"
    "2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ —Å–≤–µ—Ä—Ö—É.\n"
    "3. –í—ã–±–µ—Ä–∏—Ç–µ '–ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π'.\n"
    "4. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä–µ–º—è –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è –Ω–∞ 24 —á–∞—Å–∞.\n\n"
    "‚ùó –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∑–∞—â–∏—Ç–∏—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ —É—Ç—Ä–∞—Ç—ã –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–∞—à–µ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É.", 
    parse_mode="Markdown")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    username = str(user_id)

    response = requests.post(f"{BASE_URL}/user", json={"username": username})

    if response.status_code == 200:
        data = response.json()
        master_key = data["master_key"]
        totp_secret = data["totp_secret"]

        await update.message.reply_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n"
            "‚ö†Ô∏è *–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤–∞—à –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á –∏ TOTP-–∫–ª—é—á*, –æ–Ω–∏ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.",
            parse_mode="Markdown",
        )
        await update.message.reply_text(
            f"üîë *–í–∞—à –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á:*",
            parse_mode="Markdown",
        )
        await update.message.reply_text(
            f"||{escape_markdown_v2(master_key)}||",
            parse_mode="MarkdownV2",
        )
        await update.message.reply_text(
            f"üì≤ *–í–∞—à TOTP-–∫–ª—é—á:*",
            parse_mode="Markdown",
        )
        await update.message.reply_text(
            f"||{escape_markdown_v2(totp_secret)}||",
            parse_mode="MarkdownV2",
        )

        await update.message.reply_text(
            "üëã –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ *Google Authenticator*:\n"
            "[üçé –°–∫–∞—á–∞—Ç—å –¥–ª—è iOS](https://apps.apple.com/app/google-authenticator/id388497605) | "
            "[ü§ñ –°–∫–∞—á–∞—Ç—å –¥–ª—è Android](https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2)\n\n"
            "üìñ –ü–æ–¥—Ä–æ–±–Ω—ã–π –≥–∞–π–¥ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –∫–æ–º–∞–Ω–¥–µ /help.\n"
            "üîÑ –ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
            parse_mode="Markdown",
        )

        return ConversationHandler.END

    else:
        await update.message.reply_text(
            "üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à *–º–∞—Å—Ç–µ—Ä-–∫–ª—é—á* –∏ *TOTP-–∫–æ–¥* —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–ø—Ä–∏–º–µ—Ä: `–∫–ª—é—á –∫–æ–¥`) –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.",
            parse_mode="Markdown",
        )
        return MASTER_KEY


async def authenticate(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    try:
        master_key, totp_code = update.message.text.split(" ", 2)
    except:
        await update.message.reply_text(
            "üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à *–º–∞—Å—Ç–µ—Ä-–∫–ª—é—á* –∏ *TOTP-–∫–æ–¥* —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–ø—Ä–∏–º–µ—Ä: `–∫–ª—é—á –∫–æ–¥`) –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.",
            parse_mode="Markdown",
        )
        return MASTER_KEY

    payload = {"username": str(user_id), "master_key": master_key, "totp_code": totp_code}
    response = requests.post(f"{BASE_URL}/auth", json=payload)

    if response.status_code == 200:
        token = response.json()["token"]
        add_token(user_id, token, DEFAULT_TOKEN_TTL);
        await update.message.reply_text(
            "‚úÖ *–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!* üéâ\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ /add ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å\n"
            "‚Ä¢ /get ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏\n"
            "‚Ä¢ /del ‚Äî —É–¥–∞–ª–∏—Ç—å –ø–∞—Ä–æ–ª—å\n"
            "‚Ä¢ /logout ‚Äî –≤—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.",
            parse_mode="Markdown",
        )
        return ConversationHandler.END
    else:
        await update.message.reply_text(
            "‚ùå *–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏*. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–≤–µ–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á –∏ TOTP-–∫–æ–¥.",
            parse_mode="Markdown",
        )
        return ConversationHandler.END
        

async def cmd_add_password(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è."""
    user_id = update.message.from_user.id
    token = get_token(user_id)
    if token is None:
        await update.message.reply_text(
            "üîí *–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å!* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –≤—Ö–æ–¥–∞.",
            parse_mode="Markdown",
        )
        return ConversationHandler.END

    await update.message.reply_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞, –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n"
        "–ü—Ä–∏–º–µ—Ä: `—Å–µ—Ä–≤–∏—Å –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å`",
        parse_mode="Markdown",
    )
    return AWAITING_PASSWORD


async def handle_add_password(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–∞—Ä–æ–ª—å –≤ —Å–∏—Å—Ç–µ–º—É."""
    user_id = update.message.from_user.id
    try:
        service, login, password = update.message.text.split(" ", 2)
    except ValueError:
        await update.message.reply_text(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "`—Å–µ—Ä–≤–∏—Å –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å`",
            parse_mode="Markdown",
        )
        return AWAITING_PASSWORD

    token = get_token(user_id)
    payload = {"service": service, "login": login, "password": password}
    response = requests.post(
        f"{BASE_URL}/password",
        headers={"Authorization": f"Bearer {token}"},
        json=payload,
    )

    if response.status_code == 200:
        await update.message.reply_text(
            "‚úÖ *–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!* üîê",
            parse_mode="Markdown",
        )
    else:
        await update.message.reply_text(
            "‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å.* –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="Markdown",
        )
    return ConversationHandler.END


async def add_password_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è."""
    await update.message.reply_text(
        "‚ùå *–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.*",
        parse_mode="Markdown",
    )
    return ConversationHandler.END


async def cmd_delete_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    token = get_token(user_id)
    if token is None:
        await update.message.reply_text(
            "üîí *–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å!* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –≤—Ö–æ–¥–∞.",
            parse_mode="Markdown",
        )
        return
    
    if not context.args:
        await update.message.reply_text(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –ø–∞—Ä–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.\n"
            "–ü—Ä–∏–º–µ—Ä: `/del <ID –ø–∞—Ä–æ–ª—è>`",
            parse_mode="Markdown",
        )
        return
    
    add_token(user_id, token, DEFAULT_TOKEN_TTL)
    password_id = context.args[0]

    response = requests.delete(
        f"{BASE_URL}/password/{password_id}",
        headers={"Authorization": f"Bearer {token}"},
    )

    if response.status_code == 200:
        await update.message.reply_text(
            f"‚úÖ –ü–∞—Ä–æ–ª—å —Å ID `{password_id}` —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω! üîê",
            parse_mode="Markdown",
        )
    else:
        await update.message.reply_text(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–∞—Ä–æ–ª—å —Å ID `{password_id}`. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            parse_mode="Markdown",
        )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    token = get_token(user_id)
    if token is None:
        await update.message.reply_text(
            "üîí *–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å!* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –≤—Ö–æ–¥–∞.",
            parse_mode="Markdown",
        )
        return

    await update.message.reply_text(
        "ü§î *–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞*. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
        parse_mode="Markdown",
    )


async def cmd_get_passwords(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    token = get_token(user_id)
    if token is None:
        await update.message.reply_text(
            "üîí *–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å!* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –≤—Ö–æ–¥–∞.",
            parse_mode="Markdown",
        )
        return

    response = requests.get(
        f"{BASE_URL}/passwords",
        headers={"Authorization": f"Bearer {token}"},
    )

    if response.status_code == 200:
        passwords = response.json()
        if passwords:
            for password in passwords:
                updated_at_str = password['updated_at']
                updated_at = parser.isoparse(updated_at_str)
                formatted_date = updated_at.strftime("%d.%m.%Y %H:%M:%S")

                await update.message.reply_text(
                    f"üÜî *ID:* {password['id']}\n"
                    f"üîê *–°–µ—Ä–≤–∏—Å:* {password['service']}\n"
                    f"üîë *–õ–æ–≥–∏–Ω:* {password['login']}\n"
                    f"üóì *–°–æ–∑–¥–∞–Ω–æ:* {formatted_date}\n"
                    f"üíª *–ü–∞—Ä–æ–ª—å:*",
                    parse_mode="Markdown",
                )
                await update.message.reply_text(
                    f"||{escape_markdown_v2(password['password'])}||",
                    parse_mode="MarkdownV2",
                )
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π.",
                parse_mode="Markdown",
            )
    else:
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–æ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="Markdown",
        )


async def cmd_logout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    token = get_token(user_id)
    if token is not None:
        delete_token(user_id)
        await update.message.reply_text(
            "‚úÖ *–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.*\n–î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á! üëã",
            parse_mode="Markdown",
        )
    else:
        await update.message.reply_text(
            "‚ùå *–í—ã –Ω–µ –±—ã–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.*\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.",
            parse_mode="Markdown",
        )

async def cmd_reset_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
            "‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ*: –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç *–≤—Å–µ –≤–∞—à–∏ –ø–∞—Ä–æ–ª–∏* –∏ *–≤–∞—à –∞–∫–∫–∞—É–Ω—Ç* –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. "
            "–û–Ω–æ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.\n\n"
            "–ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã, –Ω–∞–ø–∏—à–∏—Ç–µ `Yes` –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
        parse_mode="Markdown",
    )
    return CONFIRM_RESET


async def reset_user_confirm_reset(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.text.strip().lower() == "yes":
        await update.message.reply_text(
            "üì≤ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à *TOTP-–∫–æ–¥* –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è.",
            parse_mode="Markdown",
        )
        return AWAITING_TOTP
    else:
        await update.message.reply_text(
            "‚ùå *–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è.* –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞—é—Ç—Å—è –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.",
            parse_mode="Markdown",
        )
        return ConversationHandler.END


async def reset_user_delete_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    totp_code = update.message.text.strip()

    payload = {"username": str(user_id), "totp_code": totp_code}
    response = requests.delete(f"{BASE_URL}/user", json=payload)

    if response.status_code == 200:
        delete_token(user_id)
        await update.message.reply_text(
            "‚úÖ *–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∏ –ø–∞—Ä–æ–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.*\n–ú—ã –±—É–¥–µ–º –∂–¥–∞—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞!",
            parse_mode="Markdown",
        )
    else:
        await update.message.reply_text(
            "‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç.* –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à TOTP-–∫–æ–¥ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.",
            parse_mode="Markdown",
        )
    
    return ConversationHandler.END


async def reset_user_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "‚ùå *–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è.* –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞—é—Ç—Å—è –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.",
        parse_mode="Markdown",
    )
    return ConversationHandler.END


def generate_password(length: int = DEFAULT_PASSWORD_LENGTH) -> str:
    if length < 8:
        raise ValueError("Password length must be at least 8 characters")
    
    if length > 128:
        raise ValueError("Password length must be at max 128 characters")

    letters = string.ascii_letters
    digits = string.digits
    symbols = "!@#$%^&*()-_=+[]{}|;:,.<>?/"

    all_characters = letters + digits + symbols
    password = random.choice(letters) + random.choice(digits) + random.choice(symbols)

    password += ''.join(random.choices(all_characters, k=length - 3))

    password = ''.join(random.sample(password, len(password)))

    return password


async def cmd_generate_password(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        if context.args:
            length = int(context.args[0])
        else:
            length = DEFAULT_PASSWORD_LENGTH

        password = generate_password(length)

        await update.message.reply_text(
            f"üîë *–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å:*",
            parse_mode="Markdown",
        )

        await update.message.reply_text(
            f"||{escape_markdown_v2(password)}||",
            parse_mode="MarkdownV2",
        )

    except ValueError as e:
        await update.message.reply_text(
            f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥: {e}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è (–º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤).",
            parse_mode="Markdown",
        )


def main():
    token = os.getenv("TELEGRAM_BOT_TOKEN")

    application = ApplicationBuilder().token(token).build()

    start_conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            MASTER_KEY: [MessageHandler(filters.TEXT, authenticate)],
        },
        fallbacks=[],
    )

    reset_user_conv_handler = ConversationHandler(
        entry_points=[CommandHandler("reset_user_forever", cmd_reset_user)],
        states={
            CONFIRM_RESET: [MessageHandler(filters.TEXT & ~filters.COMMAND, reset_user_confirm_reset)],
            AWAITING_TOTP: [MessageHandler(filters.TEXT & ~filters.COMMAND, reset_user_delete_user)],
        },
        fallbacks=[CommandHandler("cancel", reset_user_cancel)],
    )

    add_password_conv_handler = ConversationHandler(
        entry_points=[CommandHandler("add", cmd_add_password)],
        states={
            AWAITING_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_add_password)],
        },
        fallbacks=[CommandHandler("cancel", add_password_cancel)],
    )

    application.add_handler(start_conv_handler)
    application.add_handler(reset_user_conv_handler)
    application.add_handler(add_password_conv_handler)
    application.add_handler(CommandHandler("get", cmd_get_passwords))
    application.add_handler(CommandHandler("del", cmd_delete_password))
    application.add_handler(CommandHandler("logout", cmd_logout))
    application.add_handler(CommandHandler("help", cmd_help))
    application.add_handler(CommandHandler("gen", cmd_generate_password))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    application.run_polling()


if __name__ == "__main__":
    main()